power2 = {0=>1, 1=>2, 2=>4, 3=>8}
# キーのみの配列を得る。
power2.keys    # => [0, 1, 2, 3]
# 値のみの配列を得る。
power2.values  # => [1, 2, 4, 8]
# キー・値のペアの配列を得る。
power2.to_a    # => [[0, 1], [1, 2], [2, 4], [3, 8]]
# Enumerableのメソッドを使用すると、to_aされたものが処理される。
power4 = power2.map{|k,v| [k, v*v]}        # => [[0, 1], [1, 4], [2, 16], [3, 64]]
# 全ての値を処理した結果のハッシュを得る方法はいくつかある。
Hash[*power4.flatten]                      # => {0=>1, 1=>4, 2=>16, 3=>64}
p4={}; power2.each{|k,v| p4[k]=v*v }; p4   # => {0=>1, 1=>4, 2=>16, 3=>64}
power2.inject({}){|h,(k,v)| h[k]=v*v; h }  # => {0=>1, 1=>4, 2=>16, 3=>64}
# Ruby 1.8.7以降
{}.tap{|h| power2.each{|k,v| h[k]=v*v }}   # => {0=>1, 1=>4, 2=>16, 3=>64}
