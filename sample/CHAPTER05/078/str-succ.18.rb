#!/usr/local/bin/ruby -Ke
"1".succ          # => "2"
"01".succ         # => "02"
"file001".succ    # => "file002"
# 末尾がアルファベットのときは最後の文字が次のアルファベットになる。
"elf".succ        # => "elg"
"AA".succ         # => "AB"
# 非英数字のみからなる文字列の場合は最後の文字が次の文字コードの文字になる。
"\001\002".succ   # => "\001\003"
# 最後の文字が「9」、「z」の場合は「繰り上がり」が起こる。
"9".succ          # => "10"
"z".succ          # => "aa"
"ABZ".succ        # => "ACA"
"1Z".succ         # => "2A"
# 数字の後にアルファベットが続いている場合、次のアルファベットになるので注意！
"7th".succ        # => "7ti"
"No.009".succ     # => "No.010"
# Ruby 1.8だと数字の繰り上がりがアルファベットにも波及するので注意！
"No.9".succ       # => "Np.0"
# 末尾の非英数字は無視され、右端の英数字を探す。
"<<a>>".succ      # => "<<b>>"
"第9代".succ      # => "第10代"
"第10代".succ     # => "第11代"
"<1-10>".succ     # => "<1-11>"
# String#succ!は破壊的メソッド。
s = "100"
s.succ!           # => "101"
s.succ!           # => "102"
s                 # => "102"
# 文字列の範囲オブジェクトを作成する。
"1998年" .. "2002年"           # => "1998年".."2002年"
# 両者は等価。
(1..4).map {|i| "第#{i}回" }   # => ["第1回", "第2回", "第3回", "第4回"]
("第1回" .. "第4回").to_a      # => ["第1回", "第2回", "第3回", "第4回"]
# 08〜12の連番を得るのは文字列の範囲オブジェクトを作成するのが簡単。
(8..12).map {|i| "%02d" % i }   # => ["08", "09", "10", "11", "12"]
("08".."12").to_a               # => ["08", "09", "10", "11", "12"]
