# 整数は%d、浮動小数点数は%gを使うのが基本。
sprintf "%d/%d = %g", 1, 10, 1.0/10  # => "1/10 = 0.1"
s = "foo"
# %sはto_sで文字列化した結果が、%pはinspectの結果が埋め込まれる。「%%」で「%」そのものになる。
sprintf "%%s:%s, %%p:%p", s, s       # => "%s:foo, %p:\"foo\""
# 「%#b」で2進数、「%#o」で8進数、「%#x」と「%#X」で16進数表記になる。
"%#b" % 0b1010                       # => "0b1010"
"%#o" % 013                          # => "013"
"%#x / %#X" % [0x1b, 0x1b]           # => "0x1b / 0X1B"
# 「%+d」で正数の場合に「+」が付く。
"%+d, %+d" % [-10, 10]               # => "-10, +10"
# 「% d」で正数の場合にスペースが付く。
"% d" % 10                           # => " 10"
# 「%05d」で5桁になるように先頭に0が付く。
"%05d" % 256                         # => "00256"
# 幅を超える場合は「%d」と変わらない。
"%05d" % 1234567890                  # => "1234567890"
# 「%.3f」で小数部を3桁に、「%.3g」で有効桁数3桁になる。
"%.3f, %.3g" % [10.44, 10.44]        # => "10.440, 10.4"
# 「%5s」で幅5で右揃えにする。
"%5s" % "-"                          # => "    -"
# 「%-5s」で幅5で左揃えにする。
"%-5s" % "-"                         # => "-    "
# 「%*s」は引数で幅を得て右揃えにする。ここでは幅10になる。
sprintf("%*s", 10, "-")              # => "         -"
# 「%.Ns」で先頭のN文字（Ruby 1.9）、Nバイト（Ruby 1.8）取り出す。「*」を指定すると、その部分は引数で得る
"%.3s" % "test"                      # => "tes"
"%3.3s" % "test"                     # => "tes"
"%7.3s" % "test"                     # => "    tes"
"%.*s" % [2, "test"]                 # => "te"
"%*.*s" % [4, 2, "test"]             # => "  te"
sprintf "%.*s", 2, "test"            # => "te"
sprintf "%*.*s", 4, 2, "test"        # => "  te"
# 0〜255の数値を文字コードとみなす。
64.chr                               # => "@"
"%c" % 64                            # => "@"
