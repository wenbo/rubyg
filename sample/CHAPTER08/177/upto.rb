# 1から3まで繰り返す。
a=[]; 1.upto(3) {|i| a << i }; a            # => [1, 2, 3]
a=[]; (1..3).each {|i| a << i }; a          # => [1, 2, 3]
# 範囲オブジェクトはEnumerableのメソッドが直接使える。
(1..3).map{|i| i*i }                        # => [1, 4, 9]
# 3から1まで1ずつ減らしながら繰り返す。
a=[]; 3.downto(1) {|i| a << i }; a          # => [3, 2, 1]
# 1から10まで3ずつ増やしながら繰り返す。
a=[]; 1.step(10,3) {|i| a << i }; a         # => [1, 4, 7, 10]
a=[]; (1..10).step(3) {|i| a << i }; a      # => [1, 4, 7, 10]
# 1.0から9.9まで4.4ずつ減らしながら繰り返す。
a=[]; 9.9.step(1.0, -4.4) {|i| a << i }; a  # => [9.9, 5.5, 1.1]
# 3回繰り返す。
a=[]; 3.times {|i| a << i }; a              # => [0, 1, 2]
# Ruby 1.8.7以降ではブロックをつけないとEnumeratorを返す。
1.upto(3)             # => #<Enumerator:0x89bf318>
1.upto(3).to_a        # => [1, 2, 3]
3.downto(1)           # => #<Enumerator:0x89bef80>
3.downto(1).to_a      # => [3, 2, 1]
1.step(10,3)          # => #<Enumerator:0x89bebe8>
1.step(10,3).to_a     # => [1, 4, 7, 10]
3.times               # => #<Enumerator:0x89be83c>
3.times.to_a          # => [0, 1, 2]
(1..10).step(3)       # => #<Enumerator:0x89be4cc>
(1..10).step(3).to_a  # => [1, 4, 7, 10]
# ブロックなしtimesの結果はEnumeratorなのでEnumerableのメソッドが使える。（Ruby 1.8.7以降）
3.times.map{|x| x*x}  # => [0, 1, 4]
# ブロックつき((:Array.new:))はインデックスをブロックパラメータに持ち、ブロック評価結果を配列の要素にする。
Array.new(3) {|i| i }  # => [0, 1, 2]
