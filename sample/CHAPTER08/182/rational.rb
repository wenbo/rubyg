# rationalライブラリにRationalが組み込まれているので読み込む
# Ruby 1.9では組み込みになった
require 'rational'
r1 = Rational(3,4)   # => (3/4)
# 作成時に約分される。
r2 = Rational(4,24)  # => (1/6)
r2.to_s              # => "1/6"
# 分子と分母を得る。
[r2.numerator, r2.denominator]  # => [1, 6]
# 四則演算、累乗、剰余。
r1 + r2       # => (11/12)
r1 - r2       # => (7/12)
r1 * r2       # => (1/8)
r1 / r2       # => (9/2)
r1.quo r2     # => (9/2)
r1 ** r2      # => 0.953184292996937
r1 % r2       # => (1/12)
r1.divmod r2  # => [4, (1/12)]
# 浮動小数点数の0.1は2進数だと割切れずに誤差を含むため、数学的に正しいはずの等式がコンピュータでは正しくなくなってしまう。
6*0.1/0.1==6  # => false
# 有理数を使うことで、コンピュータでも正しくなる。
6*Rational(1,10)/Rational(1,10) == 6  # => true
# 最大公約数、最小公倍数を求める。引数はひとつしか取れない。両方必要な場合は「Integer#gcdlcm」を使ったほうが速い。
[12.gcd(16), 12.lcm(16)]  # => [4, 48]
12.gcdlcm(16)             # => [4, 48]
