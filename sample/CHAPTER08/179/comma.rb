# 正規表現による方法
# 先読み正規表現を使っている。ポータブルで最良の方法。
"賞金1234567円".gsub(/(\d)(?=(?:\d{3})+(?!\d))/, '\1,')   # => "賞金1,234,567円"
1234567.to_s.gsub(/(\d)(?=(?:\d{3})+(?!\d))/, '\1,')      # => "1,234,567"
# 先読みと戻り読み正規表現を使っている。（Ruby 1.9）
"賞金1234567円".gsub(/(?<=\d)(?=(?:\d{3})+(?!\d))/, ',')  # => "賞金1,234,567円"

# 数字のみの文字列にしか適用できない劣化版
# 1〜3個の数字の取り出しにString#scanを使っている。
1234567.to_s.reverse.scan(/\d{1,3}/).join(",").reverse    # => "1,234,567"
# Enumeratorを交じえた例。（Ruby 1.8.7以降）
1234567.to_s.reverse.chars.each_slice(3).map(&:join).join(",").reverse # => "1,234,567"
# Ruby 1.8.6以前ではかなり長くなる。
require 'enumerator'
1234567.to_s.reverse.split(//).enum_for(:each_slice,3).map{|x| x.join }.join(",").reverse
# => "1,234,567"
