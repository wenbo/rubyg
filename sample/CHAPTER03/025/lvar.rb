a0 = 0      # トップレベルのローカル変数a0はプログラム終了まで見える。
class AClass
  # ここではa0は見えない。a1はクラス定義スコープで/classまで有効。
  a1 = 1
  def a_method
    "method!"                   # a1は見えない。
  end
  def initialize
    a2 = 2 # ここではa1は見えない。
    a3 = 3 # a2とa3はメソッド定義スコープで/defまで有効。
    [[1,2]].each do |x,a3|      # a3はブロックから抜けると見えない。
      # 以後ブロックスコープ。a2は見える。
      a2      # => 2
      a4 = 4 # ブロック内で宣言されたのローカル変数はブロック外では見えなくなる。
      x       # => 1
      # 1.8ではa3は外側のa3を参照してしまうところが醜い。警告も出ないので要注意！！
      # 1.9ではa3はブロックローカルになるので外側のa3とは無関係だが警告が出る。
      a3      # => 2
    end
    # 1.8ではブロックに影響され2になる。1.9では影響されずに3のまま。
    a3        # => 2

    if true    # ifは制御構造なのでスコープは作らないので注意。
      a4 = 4   # a4はメソッド定義スコープ。
    else
      a4 = 5
    end
    a4        # => 4
    # 変数宣言されていないので無引数メソッド呼び出しになる。
    a_method  # => "method!"
  end # /def
  # 再びクラス定義の文脈なのでa1が見える。
  a1          # => 1
end # /class
# クラス定義を抜けたので外側のローカル変数が見える。
a0            # => 0
AClass.new
